---
- name: Install repository
  yum:
    name:
      - "{{ yum_repository_url_centos }}"
    state: present
  when: ansible_distribution == 'CentOS'

- name: Install
  yum:
    name:
      - "postgresql{{ postgresql_version.split('.')[0] }}"
      - "postgresql{{ postgresql_version.split('.')[0] }}-server"
    state: present
  when:
    - ansible_pkg_mgr == 'yum'
    - ansible_distribution == 'CentOS'

- name: Check data directory is not empty
  find:
    paths: "/var/lib/pgsql/{{ postgresql_version.split('.')[0] }}/data"
  register: tmp_pg_data_directory_is_empty
  when: ansible_distribution == 'CentOS'
 
- name: InitDB
  shell: /usr/pgsql-{{ postgresql_version.split('.')[0] }}/bin/postgresql-{{ postgresql_version.split('.')[0] }}-setup initdb
  when:
    - postgresql_initdb == true
    - ansible_distribution == 'CentOS'
    - tmp_pg_data_directory_is_empty.matched|int == 0

- name: Service start and enable (systemd)
  systemd:
    name: postgresql-{{ postgresql_version.split('.')[0] }}
    state: started
    enabled: yes
  when: ansible_distribution == 'CentOS'

# Sets postgresql_conf_dir
- include_vars: "{{ ansible_os_family | lower }}.yml"

- name: Set conf dir fact
  set_fact: postgresql_conf_dir={{ postgresql_conf_dir_default }}
  when: postgresql_conf_dir is not defined

# --- Configuration (postgresql.conf)
- name: Configure global settings (postgresql.conf).
  lineinfile:
    dest: "{{ postgresql_conf_dir }}/postgresql.conf"
    regexp: "^#?{{ item.option }}.+$"
    line: "{{ item.option }} = {{ item.value }}"
    state: "{{ item.state | default('present') }}"
  with_items: "{{ postgresql_conf }}"
  notify: Postgresql restart

# --- Addons
- name: Include a cube
  include: cube.yml
  when:
    - pg_cube_build == true
    - ansible_distribution == 'CentOS'
